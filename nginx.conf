events {}
http {

    # Redirect all HTTP to HTTPS:
    server {
        listen 80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

    server
    {
        listen 443 ssl;
        server_name host.domain.local;
        ssl_certificate /etc/nginx/cert.pem;
        ssl_certificate_key /etc/nginx/key_no_password.pem;

        root /etc/nginx/www;

        # had to specify types, especially for Chrome
        location ~ \.js$ {
            types {
                application/javascript js;
            }
            default_type text/html;
        }
        location ~ \.css$ {
            types {
                text/css css;
            }
            default_type text/html;
        }
        location / {
            try_files $uri $uri/ /index.html;
        }
    }

    server
    {
        listen 443 ssl;
        server_name host.other.local;
        ssl_certificate /etc/nginx/cert.pem;
        ssl_certificate_key /etc/nginx/key_no_password.pem;

        root /etc/nginx/www;
        # With no Content-Security-Policy set, the iframe will load fine
        #add_header Content-Security-Policy "default-src 'self';";
        #add_header Content-Security-Policy "default-src 'self'; frame-src https://app.domain.local https://login.valid.apizee.com;";
        

        # add_header Host host.other.local;

        # had to specify types, especially for Chrome
        location ~ \.js$ {
            types {
                application/javascript js;
            }
            default_type text/html;
        }
        location ~ \.css$ {
            types {
                text/css css;
            }
            default_type text/html;
        }
        location / {
            try_files $uri $uri/ /index.html;
        }
    }

    server
    {
        listen 443 ssl;
        server_name app.domain.local;
        ssl_certificate /etc/nginx/cert.pem;
        ssl_certificate_key /etc/nginx/key_no_password.pem;

        #add_header X-Frame-Options "SAMEORIGIN";

        location / {
            proxy_pass http://host.docker.internal:3000;
            proxy_set_header X-Forwarded-For $proxy_protocol_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port 443;
            # for next.js websocket support :
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            # had to use http_host instead of host to get app.local in next.js host header
            # otherwise next.js would use localhost
            proxy_set_header Host $http_host;
            proxy_cache_bypass $http_upgrade;
        }
    }

}